% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/random.R
\name{runif}
\alias{runif}
\title{Generate Uniform Random Numbers with GPU}
\usage{
runif(n, min = 0, max = 1, nThread = 32)
}
\arguments{
\item{n}{number of observations. This accepts only one integer.}

\item{min}{lower bound of the uniform distribution. Must be finite. 
This accepts only one double/numeric.}

\item{max}{upper bound of the uniform distribution. Must be finite. 
This accepts only one double/numeric.}

\item{nThread}{number of threads launched per block.}
}
\value{
a double vector
}
\description{
This function generates uniform random numbers using GPU.
}
\examples{
n <- 1e6
dat1 <- gpda::runif(n)
dat2 <- stats::runif(n)
den1 <- density(dat1)
den2 <- density(dat2)
## Identical result
par(mfrow=c(1,2))
hist(dat2, breaks="fd", freq=F, ylim=c(0,1.1))
lines(den1$x, den1$y,lwd=2)
hist(dat1, breaks="fd", freq=F, ylim=c(0,1.1))
lines(den2$x, den2$y,lwd=2)
par(mfrow=c(1,1))

## require(microbenchmark)
## res <- microbenchmark(gpda::runif(n), stats::runif(n), times=10L)
## Unit: milliseconds
##           expr      min        lq     mean   median       uq      max neval   
## gpda::runif(n)  1.274803 1.398778 2.051245 1.455317 1.521285 7.245396    10   
## stats::runif(n) 2.457481 2.487725 2.758491 2.622419 2.639217 3.627238    10   
}
